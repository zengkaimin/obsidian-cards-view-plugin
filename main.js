/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardsViewPlugin2
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// settings.ts
var import_obsidian2 = require("obsidian");

// components/store.ts
var import_obsidian = require("obsidian");

// node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class _ResizeObserverSingleton {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    var _a;
    return (_a = this._observer) != null ? _a : this._observer = new ResizeObserver((entries) => {
      var _a2;
      for (const entry of entries) {
        _ResizeObserverSingleton.entries.set(entry.target, entry);
        (_a2 = this._listeners.get(entry.target)) == null ? void 0 : _a2(entry);
      }
    });
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && /** @type {ShadowRoot} */
  root.host) {
    return (
      /** @type {ShadowRoot} */
      root
    );
  }
  return node.ownerDocument;
}
function append_stylesheet(node, style) {
  append(
    /** @type {Document} */
    node.head || node,
    style
  );
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function stop_propagation(fn) {
  return function(event) {
    event.stopPropagation();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  text2.data = /** @type {string} */
  data;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList.toggle(name, !!toggle);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}

// node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}

// node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/svelte/src/runtime/internal/transitions.js
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}

// node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance3, create_fragment3, not_equal, props, append_styles2 = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance3 ? instance3(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment3 ? create_fragment3($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      var _a;
      if (this.$$r)
        return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      (_a = this.$$c) == null ? void 0 : _a.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  var _a;
  const type = (_a = props_definition[prop]) == null ? void 0 : _a.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/svelte/src/runtime/store/index.js
var subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error("derived() expects stores as input, got a falsy value");
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set, update2) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set, update2);
      if (auto) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map(
      (store, i) => subscribe(
        store,
        (value) => {
          values[i] = value;
          pending &= ~(1 << i);
          if (started) {
            sync();
          }
        },
        () => {
          pending |= 1 << i;
        }
      )
    );
    started = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}

// components/store.ts
var files = writable([]);
var sort = writable("Edited (Newest First)" /* EditedDesc */);
var sortedFiles = derived(
  [sort, files],
  ([$sort, $files]) => [...$files].sort((a, b) => {
    switch ($sort) {
      case "Title (A-Z)" /* NameAsc */:
        return a.basename.localeCompare(b.basename);
      case "Title (Z-A)" /* NameDesc */:
        return b.basename.localeCompare(a.basename);
      case "Edited (Newest First)" /* EditedDesc */:
        return b.stat.mtime - a.stat.mtime;
      case "Edited (Oldest First)" /* EditedAsc */:
        return a.stat.mtime - b.stat.mtime;
      case "Created (Newest First)" /* CreatedDesc */:
        return b.stat.ctime - a.stat.ctime;
      case "Created (Oldest First)" /* CreatedAsc */:
        return a.stat.ctime - b.stat.ctime;
      default:
        return 0;
    }
  })
);
var searchQuery = writable("");
var preparedSearch = derived(
  searchQuery,
  ($searchQuery) => $searchQuery ? (0, import_obsidian.prepareFuzzySearch)($searchQuery) : null
);
var searchResultFiles = derived(
  [preparedSearch, sortedFiles],
  ([$preparedSearch, $sortedFiles], set) => {
    if ($preparedSearch == null) {
      set($sortedFiles);
      return;
    }
    Promise.all(
      $sortedFiles.map(async (file) => {
        const content = await file.vault.cachedRead(file);
        return [$preparedSearch(content), $preparedSearch(file.name)];
      })
    ).then((searchResults) => {
      set(
        $sortedFiles.filter((file, index) => {
          const [contentMatch, nameMatch] = searchResults[index];
          return contentMatch && contentMatch.score > -2 || nameMatch && nameMatch.score > -2;
        })
      );
    });
  },
  get_store_value(sortedFiles)
);
var displayedCount = writable(50);
var displayedFiles = derived(
  [searchResultFiles, displayedCount],
  ([$searchResultFiles, $displayedCount]) => $searchResultFiles.slice(0, $displayedCount)
);
var viewIsVisible = writable(false);
var skipNextTransition = writable(true);
var store_default = {
  files,
  sort,
  searchQuery,
  searchResultFiles,
  displayedCount,
  displayedFiles,
  viewIsVisible,
  skipNextTransition
};

// settings.ts
var DEFAULT_SETTINGS = {
  minCardWidth: 200,
  launchOnStart: false,
  openCardsViewOnTagTreeClick: false,
  openCardsViewOnInlineTagClick: false,
  defaultSort: "Created (Newest First)" /* CreatedDesc */,
  // 默认显示所有内容
  contentDisplay: "all"
};
var CardsViewSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5C0F\u5361\u7247\u5BBD\u5EA6").setDesc("\u5361\u7247\u7684\u6700\u5C0F\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText(
      (text2) => text2.setPlaceholder("200").setValue(this.plugin.settings.minCardWidth.toString()).onChange(async (value) => {
        if (isNaN(parseInt(value))) {
          new import_obsidian2.Notice("\u65E0\u6548\u7684\u6570\u5B57");
          return;
        }
        this.plugin.settings.minCardWidth = parseInt(value);
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("\u542F\u52A8\u65F6\u6253\u5F00").setDesc("Obsidian \u542F\u52A8\u65F6\u6253\u5F00\u5361\u7247\u89C6\u56FE").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.launchOnStart).onChange(async (value) => {
        this.plugin.settings.launchOnStart = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("\u4ECE\u6807\u7B7E\u6811\u5355\u51FB\u6807\u7B7E\u6253\u5F00\u5361\u7247\u89C6\u56FE").setDesc("\u5F53\u5728\u6807\u7B7E\u6811\u4E2D\u70B9\u51FB\u6807\u7B7E\u65F6\u6253\u5F00\u5361\u7247\u89C6\u56FE").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.openCardsViewOnTagTreeClick).onChange(async (value) => {
        this.plugin.settings.openCardsViewOnTagTreeClick = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("\u4ECE\u9875\u9762\u4E2D\u70B9\u51FB\u6807\u7B7E\u6253\u5F00\u5361\u7247\u89C6\u56FE").setDesc("\u5F53\u5728\u9875\u9762\u5185\u5BB9\u4E2D\u70B9\u51FB\u6807\u7B7E\u65F6\u6253\u5F00\u5361\u7247\u89C6\u56FE").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.openCardsViewOnInlineTagClick).onChange(async (value) => {
        this.plugin.settings.openCardsViewOnInlineTagClick = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("\u5361\u7247\u662F\u5426\u663E\u793A\u5168\u90E8").setDesc("\u9009\u62E9\u5728\u6BCF\u4E2A\u5361\u7247\u4E2D\u663E\u793A\u591A\u5C11\u5185\u5BB9").addDropdown(
      (dropdown) => dropdown.addOption("all", "\u663E\u793A\u6240\u6709\u5185\u5BB9").addOption("custom", "\u81EA\u5B9A\u4E49\u884C\u6570").setValue(
        this.plugin.settings.contentDisplay === "all" ? "all" : "custom"
      ).onChange(async (value) => {
        if (value === "all") {
          this.plugin.settings.contentDisplay = "all";
        } else {
          this.plugin.settings.contentDisplay = typeof this.plugin.settings.contentDisplay === "number" ? this.plugin.settings.contentDisplay : 10;
        }
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (typeof this.plugin.settings.contentDisplay === "number") {
      new import_obsidian2.Setting(containerEl).setName("\u663E\u793A\u884C\u6570").setDesc("\u8F93\u5165\u8981\u5728\u6BCF\u4E2A\u5361\u7247\u4E2D\u663E\u793A\u7684\u884C\u6570").addText(
        (text2) => text2.setPlaceholder("10").setValue(this.plugin.settings.contentDisplay.toString()).onChange(async (value) => {
          const numLines = parseInt(value);
          if (isNaN(numLines) || numLines < 1) {
            new import_obsidian2.Notice("\u8BF7\u8F93\u5165\u5927\u4E8E0\u7684\u6709\u6548\u6570\u5B57");
            return;
          }
          this.plugin.settings.contentDisplay = numLines;
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian2.Setting(containerEl).setName("\u91CD\u7F6E\u8BBE\u7F6E").setDesc("\u5C06\u6240\u6709\u8BBE\u7F6E\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C").addButton(
      (button) => button.setButtonText("\u91CD\u7F6E").onClick(async () => {
        this.plugin.settings = DEFAULT_SETTINGS;
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};

// view.ts
var import_obsidian5 = require("obsidian");

// node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// components/Root.svelte
var import_obsidian4 = require("obsidian");

// node_modules/minimasonry/build/minimasonry.esm.js
var MiniMasonry = function(conf) {
  this._sizes = [];
  this._columns = [];
  this._container = null;
  this._count = null;
  this._width = 0;
  this._removeListener = null;
  this._currentGutterX = null;
  this._currentGutterY = null;
  this._resizeTimeout = null, this.conf = {
    baseWidth: 255,
    gutterX: null,
    gutterY: null,
    gutter: 10,
    container: null,
    minify: true,
    ultimateGutter: 5,
    surroundingGutter: true,
    direction: "ltr",
    wedge: false
  };
  this.init(conf);
  return this;
};
MiniMasonry.prototype.init = function(conf) {
  for (var i in this.conf) {
    if (conf[i] != void 0) {
      this.conf[i] = conf[i];
    }
  }
  if (this.conf.gutterX == null || this.conf.gutterY == null) {
    this.conf.gutterX = this.conf.gutterY = this.conf.gutter;
  }
  this._currentGutterX = this.conf.gutterX;
  this._currentGutterY = this.conf.gutterY;
  this._container = typeof this.conf.container == "object" && this.conf.container.nodeName ? this.conf.container : document.querySelector(this.conf.container);
  if (!this._container) {
    throw new Error("Container not found or missing");
  }
  var onResize = this.resizeThrottler.bind(this);
  window.addEventListener("resize", onResize);
  this._removeListener = function() {
    window.removeEventListener("resize", onResize);
    if (this._resizeTimeout != null) {
      window.clearTimeout(this._resizeTimeout);
      this._resizeTimeout = null;
    }
  };
  this.layout();
};
MiniMasonry.prototype.reset = function() {
  this._sizes = [];
  this._columns = [];
  this._count = null;
  this._width = this._container.clientWidth;
  var minWidth = this.conf.baseWidth;
  if (this._width < minWidth) {
    this._width = minWidth;
    this._container.style.minWidth = minWidth + "px";
  }
  if (this.getCount() == 1) {
    this._currentGutterX = this.conf.ultimateGutter;
    this._count = 1;
  } else if (this._width < this.conf.baseWidth + 2 * this._currentGutterX) {
    this._currentGutterX = 0;
  } else {
    this._currentGutterX = this.conf.gutterX;
  }
};
MiniMasonry.prototype.getCount = function() {
  if (this.conf.surroundingGutter) {
    return Math.floor((this._width - this._currentGutterX) / (this.conf.baseWidth + this._currentGutterX));
  }
  return Math.floor((this._width + this._currentGutterX) / (this.conf.baseWidth + this._currentGutterX));
};
MiniMasonry.prototype.computeWidth = function() {
  var width;
  if (this.conf.surroundingGutter) {
    width = (this._width - this._currentGutterX) / this._count - this._currentGutterX;
  } else {
    width = (this._width + this._currentGutterX) / this._count - this._currentGutterX;
  }
  width = Number.parseFloat(width.toFixed(2));
  return width;
};
MiniMasonry.prototype.layout = function() {
  if (!this._container) {
    console.error("Container not found");
    return;
  }
  this.reset();
  if (this._count == null) {
    this._count = this.getCount();
  }
  var colWidth = this.computeWidth();
  for (var i = 0; i < this._count; i++) {
    this._columns[i] = 0;
  }
  var children2 = this._container.children;
  for (var k = 0; k < children2.length; k++) {
    children2[k].style.width = colWidth + "px";
    this._sizes[k] = children2[k].clientHeight;
  }
  var startX;
  if (this.conf.direction == "ltr") {
    startX = this.conf.surroundingGutter ? this._currentGutterX : 0;
  } else {
    startX = this._width - (this.conf.surroundingGutter ? this._currentGutterX : 0);
  }
  if (this._count > this._sizes.length) {
    var occupiedSpace = this._sizes.length * (colWidth + this._currentGutterX) - this._currentGutterX;
    if (this.conf.wedge === false) {
      if (this.conf.direction == "ltr") {
        startX = (this._width - occupiedSpace) / 2;
      } else {
        startX = this._width - (this._width - occupiedSpace) / 2;
      }
    } else {
      if (this.conf.direction == "ltr")
        ;
      else {
        startX = this._width - this._currentGutterX;
      }
    }
  }
  for (var index = 0; index < children2.length; index++) {
    var nextColumn = this.conf.minify ? this.getShortest() : this.getNextColumn(index);
    var childrenGutter = 0;
    if (this.conf.surroundingGutter || nextColumn != this._columns.length) {
      childrenGutter = this._currentGutterX;
    }
    var x;
    if (this.conf.direction == "ltr") {
      x = startX + (colWidth + childrenGutter) * nextColumn;
    } else {
      x = startX - (colWidth + childrenGutter) * nextColumn - colWidth;
    }
    var y = this._columns[nextColumn];
    children2[index].style.transform = "translate3d(" + Math.round(x) + "px," + Math.round(y) + "px,0)";
    this._columns[nextColumn] += this._sizes[index] + (this._count > 1 ? this.conf.gutterY : this.conf.ultimateGutter);
  }
  this._container.style.height = this._columns[this.getLongest()] - this._currentGutterY + "px";
};
MiniMasonry.prototype.getNextColumn = function(index) {
  return index % this._columns.length;
};
MiniMasonry.prototype.getShortest = function() {
  var shortest = 0;
  for (var i = 0; i < this._count; i++) {
    if (this._columns[i] < this._columns[shortest]) {
      shortest = i;
    }
  }
  return shortest;
};
MiniMasonry.prototype.getLongest = function() {
  var longest = 0;
  for (var i = 0; i < this._count; i++) {
    if (this._columns[i] > this._columns[longest]) {
      longest = i;
    }
  }
  return longest;
};
MiniMasonry.prototype.resizeThrottler = function() {
  if (!this._resizeTimeout) {
    this._resizeTimeout = setTimeout(function() {
      this._resizeTimeout = null;
      if (this._container.clientWidth != this._width) {
        this.layout();
      }
    }.bind(this), 33);
  }
};
MiniMasonry.prototype.destroy = function() {
  if (typeof this._removeListener == "function") {
    this._removeListener();
  }
  var children2 = this._container.children;
  for (var k = 0; k < children2.length; k++) {
    children2[k].style.removeProperty("width");
    children2[k].style.removeProperty("transform");
  }
  this._container.style.removeProperty("height");
  this._container.style.removeProperty("min-width");
};

// components/Card.svelte
var import_obsidian3 = require("obsidian");
function add_css(target) {
  append_styles(target, "svelte-npag9g", ".card.svelte-npag9g.svelte-npag9g{position:absolute;background-color:var(--background-primary-alt);border:1px solid var(--background-modifier-border);padding:var(--card-padding);word-wrap:break-word;overflow-y:hidden;margin:0;transition-property:transform;transition-duration:0.4s;transform:translate(0, 100vh)}.card.skip-transition.svelte-npag9g.svelte-npag9g{transition:none}.card.svelte-npag9g.svelte-npag9g{font-size:0.8rem}.card.svelte-npag9g p,.card.svelte-npag9g ul{margin:0.3rem 0}.card.svelte-npag9g h1,.card.svelte-npag9g h2,.card.svelte-npag9g h3{margin:0 0 0.3rem}.card.svelte-npag9g ul{padding-left:var(--size-4-5)}.card.svelte-npag9g.svelte-npag9g:hover{border-color:var(--background-modifier-border-hover)}.card.svelte-npag9g h3.svelte-npag9g{word-wrap:break-word}.card.svelte-npag9g .card-info.svelte-npag9g{margin:calc(-1 * var(--card-padding));margin-top:0;border-top:1px solid var(--background-modifier-border);padding:var(--size-4-1) var(--card-padding);background-color:var(--background-primary);display:flex;flex-direction:row;align-items:center;justify-content:end;gap:var(--size-4-1)}.card.svelte-npag9g .card-info .folder-name.svelte-npag9g{flex-grow:1}");
}
function create_if_block(ctx) {
  let span0;
  let folderIcon_action;
  let span1;
  let t_value = (
    /*file*/
    ctx[0].parent.path + ""
  );
  let t;
  let mounted;
  let dispose;
  return {
    c() {
      span0 = element("span");
      span1 = element("span");
      t = text(t_value);
      attr(span1, "class", "folder-name svelte-npag9g");
    },
    m(target, anchor) {
      insert(target, span0, anchor);
      insert(target, span1, anchor);
      append(span1, t);
      if (!mounted) {
        dispose = action_destroyer(folderIcon_action = /*folderIcon*/
        ctx[6].call(null, span0));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*file*/
      1 && t_value !== (t_value = /*file*/
      ctx2[0].parent.path + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span0);
        detach(span1);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment(ctx) {
  let div2;
  let h3;
  let t0_value = (
    /*file*/
    ctx[0].basename + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let div1;
  let t3;
  let button;
  let trashIcon_action;
  let mounted;
  let dispose;
  let if_block = (
    /*file*/
    ctx[0].parent != null && /*file*/
    ctx[0].parent.path !== "/" && create_if_block(ctx)
  );
  return {
    c() {
      div2 = element("div");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      t3 = space();
      button = element("button");
      attr(h3, "class", "svelte-npag9g");
      attr(button, "class", "clickable-icon");
      attr(div1, "class", "card-info svelte-npag9g");
      attr(div2, "class", "card svelte-npag9g");
      attr(div2, "role", "link");
      attr(div2, "tabindex", "0");
      toggle_class(
        div2,
        "skip-transition",
        /*$skipNextTransition*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, h3);
      append(h3, t0);
      append(div2, t1);
      append(div2, div0);
      ctx[8](div0);
      append(div2, t2);
      append(div2, div1);
      if (if_block)
        if_block.m(div1, null);
      append(div1, t3);
      append(div1, button);
      if (!mounted) {
        dispose = [
          action_destroyer(trashIcon_action = /*trashIcon*/
          ctx[5].call(null, button)),
          listen(button, "click", stop_propagation(function() {
            if (is_function(
              /*trashFile*/
              ctx[2]
            ))
              ctx[2].apply(this, arguments);
          })),
          listen(div2, "click", function() {
            if (is_function(
              /*openFile*/
              ctx[1]
            ))
              ctx[1].apply(this, arguments);
          }),
          listen(div2, "keydown", function() {
            if (is_function(
              /*openFile*/
              ctx[1]
            ))
              ctx[1].apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*file*/
      1 && t0_value !== (t0_value = /*file*/
      ctx[0].basename + ""))
        set_data(t0, t0_value);
      if (
        /*file*/
        ctx[0].parent != null && /*file*/
        ctx[0].parent.path !== "/"
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(div1, t3);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*$skipNextTransition*/
      16) {
        toggle_class(
          div2,
          "skip-transition",
          /*$skipNextTransition*/
          ctx[4]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      ctx[8](null);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let $skipNextTransition;
  component_subscribe($$self, skipNextTransition, ($$value) => $$invalidate(4, $skipNextTransition = $$value));
  let { file } = $$props;
  let { openFile } = $$props;
  let { renderFile } = $$props;
  let { trashFile } = $$props;
  let contentDiv;
  const trashIcon = (element2) => (0, import_obsidian3.setIcon)(element2, "trash");
  const folderIcon = (element2) => (0, import_obsidian3.setIcon)(element2, "folder");
  const dispatch = createEventDispatcher();
  onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    yield renderFile(contentDiv);
    dispatch("loaded");
  }));
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      contentDiv = $$value;
      $$invalidate(3, contentDiv);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("file" in $$props2)
      $$invalidate(0, file = $$props2.file);
    if ("openFile" in $$props2)
      $$invalidate(1, openFile = $$props2.openFile);
    if ("renderFile" in $$props2)
      $$invalidate(7, renderFile = $$props2.renderFile);
    if ("trashFile" in $$props2)
      $$invalidate(2, trashFile = $$props2.trashFile);
  };
  return [
    file,
    openFile,
    trashFile,
    contentDiv,
    $skipNextTransition,
    trashIcon,
    folderIcon,
    renderFile,
    div0_binding
  ];
}
var Card = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        file: 0,
        openFile: 1,
        renderFile: 7,
        trashFile: 2
      },
      add_css
    );
  }
};
var Card_default = Card;

// components/Root.svelte
function add_css2(target) {
  append_styles(target, "svelte-1rafa1n", ".action-bar.svelte-1rafa1n{display:flex;flex-direction:row;justify-content:end;gap:var(--size-4-5);margin-bottom:var(--size-4-5)}.cards-container.svelte-1rafa1n{position:relative;container-type:inline-size}.cards-container.svelte-1rafa1n *{--card-padding:var(--size-4-3);--card-gutter:var(--size-4-5)}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i];
  return child_ctx;
}
function create_each_block(key_1, ctx) {
  let first;
  let card;
  let current;
  function func(...args) {
    return (
      /*func*/
      ctx[14](
        /*file*/
        ctx[23],
        ...args
      )
    );
  }
  function func_1() {
    return (
      /*func_1*/
      ctx[15](
        /*file*/
        ctx[23]
      )
    );
  }
  function func_2() {
    return (
      /*func_2*/
      ctx[16](
        /*file*/
        ctx[23]
      )
    );
  }
  card = new Card_default({
    props: {
      file: (
        /*file*/
        ctx[23]
      ),
      renderFile: func,
      openFile: func_1,
      trashFile: func_2
    }
  });
  card.$on(
    "loaded",
    /*loaded_handler*/
    ctx[17]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(card.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(card, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const card_changes = {};
      if (dirty & /*$displayedFiles*/
      128)
        card_changes.file = /*file*/
        ctx[23];
      if (dirty & /*renderFile, $displayedFiles*/
      129)
        card_changes.renderFile = func;
      if (dirty & /*openFile, $displayedFiles*/
      130)
        card_changes.openFile = func_1;
      if (dirty & /*trashFile, $displayedFiles*/
      132)
        card_changes.trashFile = func_2;
      card.$set(card_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(card.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(card.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(card, detaching);
    }
  };
}
function create_fragment2(ctx) {
  let div1;
  let div0;
  let searchInput_action;
  let t0;
  let button;
  let sortIcon_action;
  let t1;
  let div2;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*$displayedFiles*/
    ctx[7]
  );
  const get_key = (ctx2) => (
    /*file*/
    ctx2[23].path + /*file*/
    ctx2[23].stat.mtime
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      button = element("button");
      t1 = space();
      div2 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(button, "class", "clickable-icon sort-button");
      attr(div1, "class", "action-bar svelte-1rafa1n");
      attr(div2, "class", "cards-container svelte-1rafa1n");
      set_style(
        div2,
        "--columns",
        /*columns*/
        ctx[6]
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div1, t0);
      append(div1, button);
      ctx[13](div1);
      insert(target, t1, anchor);
      insert(target, div2, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div2, null);
        }
      }
      ctx[18](div2);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(searchInput_action = /*searchInput*/
          ctx[9].call(null, div0)),
          action_destroyer(sortIcon_action = /*sortIcon*/
          ctx[8].call(null, button)),
          listen(
            button,
            "click",
            /*sortMenu*/
            ctx[10]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$displayedFiles, renderFile, openFile, trashFile, notesGrid*/
      143) {
        each_value = ensure_array_like(
          /*$displayedFiles*/
          ctx2[7]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div2, outro_and_destroy_block, create_each_block, null, get_each_context);
        check_outros();
      }
      if (dirty & /*columns*/
      64) {
        set_style(
          div2,
          "--columns",
          /*columns*/
          ctx2[6]
        );
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t1);
        detach(div2);
      }
      ctx[13](null);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      ctx[18](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let $skipNextTransition;
  let $viewIsVisible;
  let $sort;
  let $searchQuery;
  let $displayedFiles;
  component_subscribe($$self, skipNextTransition, ($$value) => $$invalidate(19, $skipNextTransition = $$value));
  component_subscribe($$self, viewIsVisible, ($$value) => $$invalidate(20, $viewIsVisible = $$value));
  component_subscribe($$self, sort, ($$value) => $$invalidate(21, $sort = $$value));
  component_subscribe($$self, searchQuery, ($$value) => $$invalidate(22, $searchQuery = $$value));
  component_subscribe($$self, displayedFiles, ($$value) => $$invalidate(7, $displayedFiles = $$value));
  let { settings } = $$props;
  let { renderFile } = $$props;
  let { openFile } = $$props;
  let { trashFile } = $$props;
  let { saveSettings } = $$props;
  let notesGrid;
  let viewContent;
  let cardsContainer;
  let columns;
  const sortIcon = (element2) => {
    (0, import_obsidian4.setIcon)(element2, "arrow-down-wide-narrow");
  };
  const searchInput = (element2) => {
    new import_obsidian4.SearchComponent(element2).onChange((value) => {
      set_store_value(searchQuery, $searchQuery = value, $searchQuery);
    });
  };
  function sortMenu(event) {
    const sortMenu2 = new import_obsidian4.Menu();
    sortMenu2.addItem((item) => {
      item.setTitle("Title (A-Z)");
      item.setChecked($sort == "Title (A-Z)" /* NameAsc */);
      item.onClick(() => __awaiter(this, void 0, void 0, function* () {
        set_store_value(sort, $sort = "Title (A-Z)" /* NameAsc */, $sort);
        $$invalidate(11, settings.defaultSort = "Title (A-Z)" /* NameAsc */, settings);
        yield saveSettings();
      }));
    });
    sortMenu2.addItem((item) => {
      item.setTitle("Title (Z-A)");
      item.setChecked($sort == "Title (Z-A)" /* NameDesc */);
      item.onClick(() => __awaiter(this, void 0, void 0, function* () {
        set_store_value(sort, $sort = "Title (Z-A)" /* NameDesc */, $sort);
        $$invalidate(11, settings.defaultSort = "Title (Z-A)" /* NameDesc */, settings);
        yield saveSettings();
      }));
    });
    sortMenu2.addSeparator();
    sortMenu2.addItem((item) => {
      item.setTitle("Edited (Newest First)");
      item.setChecked($sort == "Edited (Newest First)" /* EditedDesc */);
      item.onClick(() => __awaiter(this, void 0, void 0, function* () {
        set_store_value(sort, $sort = "Edited (Newest First)" /* EditedDesc */, $sort);
        $$invalidate(11, settings.defaultSort = "Edited (Newest First)" /* EditedDesc */, settings);
        yield saveSettings();
      }));
    });
    sortMenu2.addItem((item) => {
      item.setTitle("Edited (Oldest First)");
      item.setChecked($sort == "Edited (Oldest First)" /* EditedAsc */);
      item.onClick(() => __awaiter(this, void 0, void 0, function* () {
        set_store_value(sort, $sort = "Edited (Oldest First)" /* EditedAsc */, $sort);
        $$invalidate(11, settings.defaultSort = "Edited (Oldest First)" /* EditedAsc */, settings);
        yield saveSettings();
      }));
    });
    sortMenu2.addSeparator();
    sortMenu2.addItem((item) => {
      item.setTitle("Created (Newest First)");
      item.setChecked($sort == "Created (Newest First)" /* CreatedDesc */);
      item.onClick(() => __awaiter(this, void 0, void 0, function* () {
        set_store_value(sort, $sort = "Created (Newest First)" /* CreatedDesc */, $sort);
        $$invalidate(11, settings.defaultSort = "Created (Newest First)" /* CreatedDesc */, settings);
        yield saveSettings();
      }));
    });
    sortMenu2.addItem((item) => {
      item.setTitle("Created (Oldest First)");
      item.setChecked($sort == "Created (Oldest First)" /* CreatedAsc */);
      item.onClick(() => __awaiter(this, void 0, void 0, function* () {
        set_store_value(sort, $sort = "Created (Oldest First)" /* CreatedAsc */, $sort);
        $$invalidate(11, settings.defaultSort = "Created (Oldest First)" /* CreatedAsc */, settings);
        yield saveSettings();
      }));
    });
    sortMenu2.showAtMouseEvent(event);
  }
  onMount(() => {
    set_store_value(sort, $sort = settings.defaultSort, $sort);
    $$invalidate(6, columns = Math.floor(viewContent.clientWidth / settings.minCardWidth));
    $$invalidate(3, notesGrid = new MiniMasonry({
      container: cardsContainer,
      baseWidth: settings.minCardWidth,
      gutter: 20,
      surroundingGutter: false,
      ultimateGutter: 20
    }));
    notesGrid.layout();
    return () => {
      notesGrid.destroy();
    };
  });
  afterUpdate((0, import_obsidian4.debounce)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!$viewIsVisible) {
      set_store_value(skipNextTransition, $skipNextTransition = true, $skipNextTransition);
      return;
    }
    notesGrid.layout();
    set_store_value(skipNextTransition, $skipNextTransition = false, $skipNextTransition);
  })));
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      viewContent = $$value;
      $$invalidate(4, viewContent);
    });
  }
  const func = (file, el) => renderFile(file, el);
  const func_1 = (file) => openFile(file);
  const func_2 = (file) => trashFile(file);
  const loaded_handler = () => notesGrid.layout();
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      cardsContainer = $$value;
      $$invalidate(5, cardsContainer);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("settings" in $$props2)
      $$invalidate(11, settings = $$props2.settings);
    if ("renderFile" in $$props2)
      $$invalidate(0, renderFile = $$props2.renderFile);
    if ("openFile" in $$props2)
      $$invalidate(1, openFile = $$props2.openFile);
    if ("trashFile" in $$props2)
      $$invalidate(2, trashFile = $$props2.trashFile);
    if ("saveSettings" in $$props2)
      $$invalidate(12, saveSettings = $$props2.saveSettings);
  };
  return [
    renderFile,
    openFile,
    trashFile,
    notesGrid,
    viewContent,
    cardsContainer,
    columns,
    $displayedFiles,
    sortIcon,
    searchInput,
    sortMenu,
    settings,
    saveSettings,
    div1_binding,
    func,
    func_1,
    func_2,
    loaded_handler,
    div2_binding
  ];
}
var Root = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance2,
      create_fragment2,
      safe_not_equal,
      {
        settings: 11,
        renderFile: 0,
        openFile: 1,
        trashFile: 2,
        saveSettings: 12
      },
      add_css2
    );
  }
};
var Root_default = Root;

// view.ts
var VIEW_TYPE = "cards-view";
var CardsViewPluginView = class extends import_obsidian5.ItemView {
  constructor(settings, leaf, saveSettings) {
    super(leaf);
    this.settings = settings;
    this.saveSettings = saveSettings;
    this.svelteRoot = null;
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "Cards View";
  }
  async onOpen() {
    const viewContent = this.containerEl.children[1];
    store_default.files.set(this.app.vault.getMarkdownFiles());
    this.svelteRoot = new Root_default({
      props: {
        settings: this.settings,
        openFile: async (file) => await this.app.workspace.getLeaf("tab").openFile(file),
        renderFile: async (file, el) => {
          const content = await this.app.vault.cachedRead(file);
          let displayContent;
          if (this.settings.contentDisplay === "all") {
            displayContent = content;
          } else {
            const lines = content.split("\n");
            displayContent = lines.slice(0, this.settings.contentDisplay).join("\n");
            if (lines.length > this.settings.contentDisplay) {
              displayContent += "\n...";
            }
          }
          await import_obsidian5.MarkdownRenderer.render(
            this.app,
            displayContent,
            el,
            file.path,
            this
          );
        },
        trashFile: async (file) => {
          await this.app.vault.trash(file, true);
        },
        saveSettings: this.saveSettings
      },
      target: viewContent
    });
    this.registerEvent(
      this.app.vault.on("create", async (file) => {
        if (file instanceof import_obsidian5.TFile && file.extension === "md") {
          store_default.files.update((files2) => files2 == null ? void 0 : files2.concat(file));
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("delete", async (file) => {
        if (file instanceof import_obsidian5.TFile && file.extension === "md") {
          store_default.files.update(
            (files2) => files2 == null ? void 0 : files2.filter((f) => f.path !== file.path)
          );
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", async (file) => {
        if (file instanceof import_obsidian5.TFile && file.extension === "md") {
          store_default.files.update(
            (files2) => files2 == null ? void 0 : files2.map((f) => f.path === file.path ? file : f)
          );
        }
      })
    );
    this.registerEvent(
      this.app.vault.on(
        "rename",
        async (file, oldPath) => {
          if (file instanceof import_obsidian5.TFile && file.extension === "md") {
            store_default.files.update(
              (files2) => files2 == null ? void 0 : files2.map((f) => f.path === oldPath ? file : f)
            );
          }
        }
      )
    );
    viewContent.addEventListener("scroll", async () => {
      if (viewContent.scrollTop + viewContent.clientHeight > viewContent.scrollHeight - 500) {
        store_default.skipNextTransition.set(true);
        store_default.displayedCount.set(get_store_value(store_default.displayedFiles).length + 50);
      }
    });
    this.app.workspace.on("active-leaf-change", () => {
      var _a;
      const rootLeaf = this.app.workspace.getMostRecentLeaf(
        this.app.workspace.rootSplit
      );
      store_default.viewIsVisible.set(((_a = rootLeaf == null ? void 0 : rootLeaf.view) == null ? void 0 : _a.getViewType()) === VIEW_TYPE);
    });
  }
  updateFiles(files2, sortType = "Edited (Newest First)" /* EditedDesc */) {
    store_default.files.set(files2);
    store_default.displayedCount.set(50);
    store_default.searchQuery.set("");
    store_default.sort.set(sortType);
  }
  async onClose() {
    if (this.svelteRoot) {
      this.svelteRoot.$destroy();
      this.svelteRoot = null;
    }
    store_default.viewIsVisible.set(false);
    store_default.searchQuery.set("");
    store_default.displayedCount.set(50);
    store_default.sort.set("Edited (Newest First)" /* EditedDesc */);
  }
};

// main.ts
var CardsViewPlugin2 = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.settings = Object.assign({}, DEFAULT_SETTINGS);
  }
  async onload() {
    this.settings = Object.assign(this.settings, await this.loadData());
    this.addSettingTab(new CardsViewSettingsTab(this.app, this));
    store_default.sort.set("Created (Newest First)" /* CreatedDesc */);
    this.registerView(
      VIEW_TYPE,
      (leaf) => new CardsViewPluginView(
        this.settings,
        leaf,
        this.saveSettings.bind(this)
      )
    );
    this.addRibbonIcon("align-start-horizontal", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addCommand({
      id: "cards-view-plugin",
      name: "\u6253\u5F00\u5361\u7247\u89C6\u56FE",
      callback: () => {
        this.activateView();
      }
    });
    this.app.workspace.onLayoutReady(() => {
      if (this.settings.launchOnStart) {
        this.activateView();
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian6.TFolder) {
          menu.addItem((item) => {
            item.setTitle("\u5728\u5361\u7247\u89C6\u56FE\u4E2D\u6253\u5F00\u6587\u4EF6\u5939").setIcon("documents").onClick(() => this.openAllFilesInFolder(file));
          });
        }
      })
    );
    this.registerDomEvent(document, "click", (evt) => {
      var _a;
      if (this.settings.openCardsViewOnTagTreeClick) {
        const target = evt.target;
        let tagElement = target.closest(".tree-item-self.tag-pane-tag");
        if (tagElement) {
          const textElement = tagElement.querySelector(".tree-item-inner-text");
          if (textElement) {
            const tagName = (_a = textElement.textContent) == null ? void 0 : _a.trim();
            if (tagName) {
              this.openTagInCardsView(tagName);
              evt.preventDefault();
            }
          }
        }
      }
    });
    this.registerDomEvent(document, "click", (evt) => {
      var _a;
      if (this.settings.openCardsViewOnInlineTagClick) {
        const target = evt.target;
        if (target.classList.contains("cm-hashtag-end") && target.closest(".cm-line")) {
          const tagName = (_a = target.textContent) == null ? void 0 : _a.trim();
          if (tagName) {
            this.openTagInCardsView(tagName);
            evt.preventDefault();
          }
        }
      }
    });
  }
  onunload() {
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE);
    if (leaves.length) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf("tab");
    }
    await leaf.setViewState({ type: VIEW_TYPE, active: true });
    store_default.viewIsVisible.set(true);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openAllFilesInFolder(folder) {
    const files2 = folder.children.filter(
      (child) => child instanceof import_obsidian6.TFile && child.extension === "md"
    );
    await this.activateView();
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE);
    if (leaves.length > 0) {
      const cardsView = leaves[0].view;
      cardsView.updateFiles(files2, "Created (Newest First)" /* CreatedDesc */);
    }
  }
  async openTagInCardsView(tagName) {
    try {
      const files2 = await this.getFilesWithTag(tagName);
      await this.activateView();
      const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE);
      if (leaves.length > 0) {
        const cardsView = leaves[0].view;
        cardsView.updateFiles(files2, "Created (Newest First)" /* CreatedDesc */);
      } else {
        new import_obsidian6.Notice("\u65E0\u6CD5\u6253\u5F00\u5361\u7247\u89C6\u56FE");
      }
    } catch (error) {
      console.error("\u6253\u5F00\u6807\u7B7E\u5361\u7247\u89C6\u56FE\u65F6\u51FA\u9519:", tagName, error);
      new import_obsidian6.Notice(`\u6253\u5F00\u5361\u7247\u89C6\u56FE\u65F6\u51FA\u9519: ${this.getErrorMessage(error)}`);
    }
  }
  async getFilesWithTag(tagName) {
    var _a;
    const files2 = [];
    for (const file of this.app.vault.getMarkdownFiles()) {
      const cache = this.app.metadataCache.getFileCache(file);
      if ((_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((tag) => tag.tag === `#${tagName}`)) {
        files2.push(file);
      }
    }
    return files2;
  }
  getErrorMessage(error) {
    if (error instanceof Error) {
      return error.message;
    }
    return String(error);
  }
};
//# sourceMappingURL=data:application/json;base64,
